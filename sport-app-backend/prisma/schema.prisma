// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement())
  email            String               @unique
  username         String               @unique @db.VarChar(30)
  password         String
  role             Role                 @default(USER)
  exercises        Exercise[]
  trains           Train[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  History          History[]
  biologyAdditives BiologicalAdditive[]
  bodyReactions    BodyReaction[]
  reminds          Remind[]

  @@map("users")
}

model Exercise {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(256)
  description String            @db.VarChar(1024)
  image       String?
  video       String?
  author_id   Int
  author      User              @relation(fields: [author_id], references: [id])
  trains      ExerciseOnTrain[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  muscleGroup MuscleGroup       @default(Neck)

  @@map("exercises")
}

enum MuscleGroup {
  Neck
  Trapezius
  Shoulders
  Chest
  Latissimus
  Biceps
  Triceps
  Forearms
  MiddleBack
  LowerBack

  @@map("musclegroup")
}

model Train {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(256)
  description String            @db.VarChar(1024)
  author      User              @relation(fields: [author_id], references: [id])
  author_id   Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  exercises   ExerciseOnTrain[]

  @@map("trains")
}

model ExerciseOnTrain {
  id             Int       @id @default(autoincrement())
  Exercise       Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId     Int
  Train          Train     @relation(fields: [trainId], references: [id], onDelete: Cascade)
  trainId        Int
  repetition     Int? // повторение
  approach       Int       @default(1) // подходы 
  weight         Int?   @default(0)// вес 
  time           Int? // время в секундах
  exerciseNumber Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  History        History[]

  @@unique([trainId, exerciseNumber], name: "unique_trainId_exerciseNumber")
  @@map("exercises_trains")
}

model History {
  id                Int             @id @default(autoincrement())
  author            User            @relation(fields: [authorId], references: [id])
  authorId          Int
  exerciseOnTrain   ExerciseOnTrain @relation(fields: [exerciseOnTrainId], references: [id])
  exerciseOnTrainId Int
  createdAt         DateTime        @default(now())

  @@map("history")
}

model BiologicalAdditive {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(256)
  description String   @db.VarChar(1024)
  User        User?    @relation(fields: [author_id], references: [id])
  author_id   Int?
  reminds     Remind[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("biological_additives")
}

model BodyReaction {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(256)
  detail    String @db.VarChar(1024)
  User      User?  @relation(fields: [author_id], references: [id])
  author_id Int?
}

model Remind {
  id                   Int                 @id @default(autoincrement())
  time                 Int // надо будет переводить часы и минуты в int
  period               Int                 @default(1) // период употребления
  measure              Float               @default(2.5)
  count_reception      Int                 @default(1)
  current_reception    Int                 @default(0)
  last_reception       DateTime            @default(now()) // последнее употребление 
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  BiologicalAdditive   BiologicalAdditive? @relation(fields: [biologicalAdditiveId], references: [id])
  biologicalAdditiveId Int?
  User                 User?               @relation(fields: [userId], references: [id])
  userId               Int?
  token                String?
}

enum Role {
  USER
  ADMIN
}
